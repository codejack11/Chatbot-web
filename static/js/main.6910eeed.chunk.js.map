{"version":3,"sources":["Components/chatbot/PostLetter.jsx","Components/chatbot/SimpleForm.jsx","App.js","reportWebVitals.js","index.js"],"names":["Postletter","props","useState","advice","setAdvice","steps","sender","name","address","lettertype","bestdescribe","leadletter","anymessage","signature","obj","message","useEffect","a","fetch","method","headers","body","JSON","stringify","response","json","console","log","fetchData","SimpleForm","floating","floatingStyle","left","right","transformOrigin","borderRadius","style","height","width","contentStyle","id","trigger","options","value","label","user","component","asMessage","end","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6910eeed.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nconst Postletter = (props) => {\r\n\r\n    const [advice, setAdvice] = useState(\"\");\r\n\r\n    const { steps } = props;\r\n    const { sender, name, address, lettertype, bestdescribe, leadletter, anymessage, signature } = steps;\r\n    // var api_response = \"\";\r\n    const obj = {\r\n        \"ques1\": sender.message,\r\n        \"ques2\": name.message,\r\n        \"ques3\": address.message,\r\n        \"ques4\": lettertype.message,\r\n        \"ques5\": bestdescribe.message,\r\n        \"ques6\": leadletter.message,\r\n        \"ques7\": anymessage.message,\r\n        \"ques8\": signature.message\r\n    }\r\n\r\n    useEffect(() => {\r\n        const url = \"https://typewritter-gpt.herokuapp.com/api/getResponse\";\r\n\r\n        const fetchData = async () => {\r\n            try {\r\n                const response = await fetch(url, {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        \"Content-Type\": 'application/json'\r\n                    },\r\n                    body: JSON.stringify(obj)\r\n                });\r\n                const json = await response.json();\r\n                console.log(json.response);\r\n                setAdvice(json.response);\r\n            } catch (error) {\r\n                console.log(\"error\", error);\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    return (\r\n        <div>Dear {advice}</div>\r\n    );\r\n}\r\n\r\n// const App = (props) => {\r\n//     const [advice, setAdvice] = useState(\"\");\r\n\r\n//     const { steps } = props;\r\n//     const { sender, name, address, lettertype, bestdescribe, leadletter, anymessage, signature } = steps;\r\n//     // var api_response = \"\";\r\n//     const obj = {\r\n//         \"ques1\": sender.message,\r\n//         \"ques2\": name.message,\r\n//         \"ques3\": address.message,\r\n//         \"ques4\": lettertype.message,\r\n//         \"ques5\": bestdescribe.message,\r\n//         \"ques6\": leadletter.message,\r\n//         \"ques7\": anymessage.message,\r\n//         \"ques8\": signature.message\r\n//     }\r\n\r\n//     useEffect(() => {\r\n//         const url = \"http://localhost:5000/api/getResponse\";\r\n\r\n//         const fetchData = async () => {\r\n//             try {\r\n//                 const response = await fetch(url, {\r\n//                     method: 'POST',\r\n//                     headers: {\r\n//                         \"Content-Type\": 'application/json'\r\n//                     },\r\n//                     body: JSON.stringify(obj)\r\n//                 });\r\n//                 const json = await response.json();\r\n//                 console.log(json.response);\r\n//                 setAdvice(json.response);\r\n//             } catch (error) {\r\n//                 console.log(\"error\", error);\r\n//             }\r\n//         };\r\n\r\n//         fetchData();\r\n//     }, []);\r\n\r\n//     return (\r\n//         <div>{advice}</div>\r\n//     );\r\n// };\r\n\r\nexport default Postletter","import React, { } from \"react\";\r\nimport Chatbot from 'react-simple-chatbot';\r\nimport Postletter from \"./PostLetter\";\r\n\r\nconst SimpleForm = (props) => {\r\n    // const{ sender, name, address, lettertype, bestdescribe, leadletter, anymessage, signature } = steps;\r\n    // const name_user = props.name.message\r\n    return (\r\n        <Chatbot\r\n            floating={false}\r\n            floatingStyle={{\r\n                left: 'calc(50% - 8px)',\r\n                right: 'initial',\r\n                transformOrigin: 'center center',\r\n                borderRadius: 0,\r\n                // outerWidth: 100\r\n            }}\r\n            style={{\r\n                left: 'calc(50% - 375px)',\r\n                height: '100%',\r\n                width: '80vh',\r\n                // innerHeight: '100vh',\r\n                // outerWidth: '80vh'\r\n            }}\r\n            contentStyle= {{\r\n                height: '80vh',\r\n                width: '100%',\r\n            }}\r\n            steps={[\r\n                {\r\n                    id: 'intro',\r\n                    message: 'Dear Human, answer a few questions to write your letter. We will post it for you',\r\n                    trigger: 'started',\r\n                },\r\n                {\r\n                    id: 'started',\r\n                    options: [\r\n                        { value: 'start', label: 'Get Started', trigger: '1' },\r\n\r\n                    ],\r\n                },\r\n                {\r\n                    id: '1',\r\n                    message: 'Who would you like to send the letter to?',\r\n                    trigger: 'sender',\r\n                },\r\n                {\r\n                    id: 'sender',\r\n                    options: [\r\n                        { value: 'lover', label: 'a lover', trigger: '3' },\r\n                        { value: 'friend', label: 'a friend far away', trigger: '3' },\r\n                        { value: 'stranger', label: 'a stranger', trigger: '3' },\r\n                    ],\r\n                },\r\n                {\r\n                    id: '3',\r\n                    message: 'What his/her name',\r\n                    trigger: 'name',\r\n                },\r\n                {\r\n                    id: 'name',\r\n                    user: true,\r\n                    trigger: '5',\r\n                },\r\n                {\r\n                    id: '5',\r\n                    message: 'What his/her address',\r\n                    trigger: 'address',\r\n                },\r\n                {\r\n                    id: 'address',\r\n                    user: true,\r\n                    trigger: '7',\r\n                },\r\n                {\r\n                    id: '7',\r\n                    message: 'What type of letter you would like to write today?',\r\n                    trigger: 'lettertype',\r\n                },\r\n                {\r\n                    id: 'lettertype',\r\n                    options: [\r\n                        { value: 'invitaion', label: 'an invitation to collaborate', trigger: '9' },\r\n                        { value: 'love declaration', label: 'a love declaration', trigger: '9' },\r\n                        { value: 'a peek', label: 'a peek into the future', trigger: '9' },\r\n                    ],\r\n                },\r\n                {\r\n                    id: '9',\r\n                    message: 'Which of the following describes receiver?',\r\n                    trigger: 'bestdescribe',\r\n                },\r\n                {\r\n                    id: 'bestdescribe',\r\n                    options: [\r\n                        { value: 'brilliant', label: 'infuriating but brilliant', trigger: '11' },\r\n                        { value: 'mysterious', label: 'enigmating and mysterious', trigger: '11' },\r\n                        { value: 'rock', label: 'solid as a rock', trigger: '11' },\r\n                    ],\r\n\r\n                },\r\n                {\r\n                    id: '11',\r\n                    message: 'What would you like letter lead to?',\r\n                    trigger: 'leadletter',\r\n                },\r\n                {\r\n                    id: 'leadletter',\r\n                    options: [\r\n                        { value: 'tear', label: 'bring a tear to receiver eye', trigger: '13' },\r\n                        { value: 'differently', label: 'Make receiver see something differently', trigger: '13' },\r\n                        { value: 'project', label: 'build a project together', trigger: '13' },\r\n                    ],\r\n\r\n                },\r\n                {\r\n                    id: '13',\r\n                    message: 'Anything else you want to say?',\r\n                    trigger: 'anymessage',\r\n                },\r\n                {\r\n                    id: 'anymessage',\r\n                    user: true,\r\n                    trigger: '15',\r\n                },\r\n                {\r\n                    id: '15',\r\n                    message: 'How would you like to sign yourself:',\r\n                    trigger: 'signature',\r\n                },\r\n                {\r\n                    id: 'signature',\r\n                    user: true,\r\n                    trigger: '17',\r\n                },\r\n                {\r\n                    id: '17',\r\n                    message: 'Thank you. Your letter is almost ready.',\r\n                    trigger: '18',\r\n                },\r\n                {\r\n                    id: '18',\r\n                    component: <Postletter />,\r\n                    asMessage: true,\r\n                    end: true\r\n                }\r\n            ]} />\r\n    )\r\n}\r\n\r\nexport default SimpleForm;","import SimpleForm from './Components/chatbot/SimpleForm';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SimpleForm/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}